;
; File generated by cc65 v 2.17 - Git 6c320f7d
;
	.fopt		compiler,"cc65 v 2.17 - Git 6c320f7d"
	.setcpu		"65C02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.export		_setup_screen
	.export		_display_footer
	.export		_screen_colour_line
	.export		_screen_hex
	.export		_screen_hex_byte
	.export		_screen_decimal
	.export		_set_screen_attributes
	.export		_write_line
	.export		_recolour_last_line
	.export		_read_line
	.export		_format_decimal
	.export		_format_hex
	.export		_screen_line_address
	.export		_fatal_error
	.import		_m65_io_enable
	.import		_lpeek
	.import		_lpoke
	.import		_lcopy
	.import		_lfill
	.import		_charset
	.export		_screen_column
	.export		_footer_messages
	.export		_screen_hex_buffer
	.export		_screen_hex_digits
	.export		_to_screen_hex
	.export		_screen_decimal_digits
	.export		_ii
	.export		_j
	.export		_carry
	.export		_temp
	.export		_value
	.export		_addr
	.export		_i

.segment	"DATA"

_screen_line_address:
	.dword	$0000F400
_screen_column:
	.byte	$00
_footer_messages:
	.addr	L0106
	.addr	L0108
	.addr	L010A
_screen_hex_digits:
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
_screen_decimal_digits:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$09
	.byte	$06
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$09
	.byte	$02
	.byte	$01
	.byte	$06
	.byte	$03
	.byte	$08
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$07
	.byte	$06
	.byte	$08

.segment	"RODATA"

L0108:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$20,$20,$00
L0106:
	.byte	$4D,$45,$47,$41,$36,$35,$20,$45,$58,$41,$4D,$50,$4C,$45,$20,$43
	.byte	$20,$50,$52,$4F,$47,$52,$41,$4D,$20,$3A,$20,$28,$43,$29,$20,$43
	.byte	$4F,$50,$59,$52,$49,$47,$48,$54,$20,$32,$30,$31,$37,$2D,$32,$30
	.byte	$31,$38,$20,$50,$41,$55,$4C,$20,$47,$41,$52,$44,$4E,$45,$52,$2D
	.byte	$53,$54,$45,$50,$48,$45,$4E,$20,$45,$54,$43,$2E,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$20,$20,$00
L010A:
	.byte	$41,$20,$46,$41,$54,$41,$4C,$20,$45,$52,$52,$4F,$52,$20,$48,$41
	.byte	$53,$20,$4F,$43,$43,$55,$52,$52,$45,$44,$2C,$20,$53,$4F,$52,$52
	.byte	$59,$2E,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$20,$20,$00

.segment	"BSS"

_screen_hex_buffer:
	.res	6,$00
_ii:
	.res	1,$00
_j:
	.res	1,$00
_carry:
	.res	1,$00
_temp:
	.res	1,$00
_value:
	.res	2,$00
_addr:
	.res	4,$00
_i:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ setup_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setup_screen: near

.segment	"CODE"

	jsr     decsp1
	jsr     _m65_io_enable
	stz     $D05C
	stz     $D05D
	lda     #$60
	sta     $D031
	lda     #$D2
	sta     $D018
	lda     $DD00
	sta     (sp)
	and     #$FC
	sta     (sp)
	ora     #$01
	sta     (sp)
	sta     $DD00
	lda     #$40
	sta     $D058
	lda     #$48
	sta     $D048
	lda     #$28
	sta     $D04A
	lda     #$4A
	sta     $D04E
	stz     $D060
	lda     #$F4
	sta     $D061
	stz     $D020
	lda     #$06
	sta     $D021
	jsr     decsp5
	lda     #$00
	ldy     #$01
	sta     (sp),y
	ldy     #$03
	sta     (sp),y
	iny
	sta     (sp),y
	lda     #$F4
	ldy     #$02
	sta     (sp),y
	lda     #$20
	sta     (sp)
	ldx     #$07
	lda     #$80
	jsr     _lfill
	jsr     decsp5
	ldy     #$01
	lda     #$00
	sta     (sp),y
	iny
	sta     (sp),y
	lda     #$F8
	iny
	sta     (sp),y
	lda     #$0F
	iny
	sta     (sp),y
	lda     #$01
	sta     (sp)
	ldx     #$07
	lda     #$80
	jsr     _lfill
	jsr     decsp8
	lda     _charset
	ldx     _charset+1
	jsr     axlong
	ldy     #$04
	jsr     steaxysp
	lda     #$00
	sta     (sp)
	ldy     #$02
	sta     (sp),y
	iny
	sta     (sp),y
	lda     #$88
	ldy     #$01
	sta     (sp),y
	ldx     #$08
	lda     #$00
	jsr     _lcopy
	ldx     #$F4
	stz     _screen_line_address
	stx     _screen_line_address+1
	stz     _screen_line_address+2
	stz     _screen_line_address+3
	stz     _screen_column
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ display_footer (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_display_footer: near

.segment	"CODE"

	jsr     pusha
	ldx     #$00
	lda     (sp)
	asl     a
	bcc     L03AE
	inx
	clc
L03AE:	adc     #<(_footer_messages)
	sta     ptr1
	txa
	adc     #>(_footer_messages)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _addr+1
	lda     (ptr1)
	sta     _addr
	stz     _addr+2
	stz     _addr+3
	jsr     decsp8
	lda     _addr+3
	sta     sreg+1
	lda     _addr+2
	sta     sreg
	ldx     _addr+1
	lda     _addr
	ldy     #$04
	jsr     steaxysp
	lda     #$40
	sta     (sp)
	lda     #$FB
	ldy     #$01
	sta     (sp),y
	lda     #$00
	iny
	sta     (sp),y
	iny
	sta     (sp),y
	tax
	lda     #$40
	jsr     _lcopy
	jsr     decsp5
	ldy     #$01
	lda     #$40
	sta     (sp),y
	lda     #$FB
	iny
	sta     (sp),y
	lda     #$00
	iny
	sta     (sp),y
	iny
	sta     (sp),y
	lda     #$40
	sta     (sp)
	lda     #$20
	jsr     _set_screen_attributes
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ screen_colour_line (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_colour_line: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp5
	ldy     #$06
	ldx     #$00
	lda     (sp),y
	jsr     shlax4
	jsr     shlax2
	jsr     push0ax
	ldx     #$00
	lda     #$F8
	sta     sreg
	lda     #$0F
	sta     sreg+1
	txa
	jsr     tosaddeax
	ldy     #$01
	jsr     steaxysp
	ldy     #$05
	lda     (sp),y
	sta     (sp)
	ldx     #$00
	lda     #$40
	jsr     _lfill
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ screen_hex (unsigned int, long)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_hex: near

.segment	"CODE"

	jsr     pusheax
	ldy     #$07
	jsr     pushwysp
	ldy     #$05
	jsr     ldeaxysp
	ldx     #$00
	lda     sreg+1
	bpl     L0133
	dex
L0133:	stx     sreg
	stx     sreg+1
	jsr     asreax4
	jsr     _to_screen_hex
	ldy     #$00
	jsr     staspidx
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ina
	bne     L0137
	inx
L0137:	jsr     pushax
	ldy     #$05
	jsr     ldeaxysp
	lda     sreg+1
	jsr     _to_screen_hex
	ldy     #$00
	jsr     staspidx
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$02
	bcc     L013E
	inx
L013E:	jsr     pushax
	ldy     #$05
	jsr     ldeaxysp
	ldy     #$00
	ldx     sreg+1
	bpl     L0141
	dey
L0141:	lda     sreg
	sty     sreg+1
	sty     sreg
	jsr     asreax4
	jsr     _to_screen_hex
	ldy     #$00
	jsr     staspidx
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$03
	bcc     L0145
	inx
L0145:	jsr     pushax
	ldy     #$05
	jsr     ldeaxysp
	lda     sreg
	jsr     _to_screen_hex
	ldy     #$00
	jsr     staspidx
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$04
	bcc     L014C
	inx
L014C:	jsr     pushax
	ldy     #$05
	jsr     ldeaxysp
	txa
	ldx     sreg
	ldy     sreg+1
	sty     sreg
	cpy     #$80
	ldy     #$00
	bcc     L014F
	dey
L014F:	sty     sreg+1
	jsr     asreax4
	jsr     _to_screen_hex
	ldy     #$00
	jsr     staspidx
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$05
	bcc     L0153
	inx
L0153:	jsr     pushax
	ldy     #$05
	jsr     ldeaxysp
	txa
	ldy     sreg+1
	cpy     #$80
	jsr     _to_screen_hex
	ldy     #$00
	jsr     staspidx
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$06
	bcc     L015A
	inx
L015A:	jsr     pushax
	ldy     #$05
	jsr     ldeaxysp
	jsr     asreax4
	jsr     _to_screen_hex
	ldy     #$00
	jsr     staspidx
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$07
	bcc     L0160
	inx
L0160:	jsr     pushax
	ldy     #$02
	lda     (sp),y
	jsr     _to_screen_hex
	ldy     #$00
	jsr     staspidx
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ screen_hex_byte (unsigned int, long)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_hex_byte: near

.segment	"CODE"

	jsr     pusheax
	ldy     #$07
	jsr     pushwysp
	ldy     #$05
	jsr     ldeaxysp
	jsr     asreax4
	jsr     _to_screen_hex
	ldy     #$00
	jsr     staspidx
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ina
	bne     L012A
	inx
L012A:	jsr     pushax
	ldy     #$02
	lda     (sp),y
	jsr     _to_screen_hex
	ldy     #$00
	jsr     staspidx
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ screen_decimal (unsigned int, unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_decimal: near

.segment	"CODE"

	jsr     pushax
	ldy     #$01
	lda     (sp),y
	sta     _value+1
	lda     (sp)
	sta     _value
	stz     _ii
L03B3:	lda     _ii
	cmp     #$05
	bcs     L03B4
	ldy     _ii
	lda     #$00
	sta     _screen_hex_buffer,y
	inc     _ii
	bra     L03B3
L03B4:	stz     _ii
L03B5:	lda     _ii
	cmp     #$10
	bcs     L03B8
	lda     _value
	and     #$01
	beq     L0238
	stz     _carry
	lda     #$04
	sta     _j
L03B6:	lda     _j
	cmp     #$80
	bcs     L0238
	ldy     _j
	lda     _screen_hex_buffer,y
	jsr     pusha0
	lda     _ii
	jsr     mulax5
	clc
	adc     #<(_screen_decimal_digits)
	sta     ptr1
	txa
	adc     #>(_screen_decimal_digits)
	sta     ptr1+1
	ldy     _j
	lda     (ptr1),y
	jsr     tosadda0
	clc
	adc     _carry
	sta     _temp
	cmp     #$0A
	lda     #$00
	bcc     L03B2
	lda     _temp
	sec
	sbc     #$0A
	sta     _temp
	lda     #$01
L03B2:	sta     _carry
	ldy     _j
	lda     _temp
	sta     _screen_hex_buffer,y
	dec     _j
	bra     L03B6
L0238:	lda     _value+1
	lsr     a
	sta     _value+1
	lda     _value
	ror     a
	sta     _value
	inc     _ii
	bra     L03B5
L03B8:	stz     _j
L03B9:	lda     _j
	cmp     #$05
	bcs     L03BA
	lda     #<(_screen_hex_buffer)
	ldx     #>(_screen_hex_buffer)
	clc
	adc     _j
	bcc     L025E
	inx
L025E:	sta     ptr1
	stx     ptr1+1
	ldy     _j
	lda     _screen_hex_buffer,y
	ora     #$30
	sta     (ptr1)
	inc     _j
	bra     L03B9
L03BA:	stz     _j
L03BB:	lda     _j
	cmp     #$04
	bcs     L03BC
	lda     _screen_hex_buffer
	cmp     #$30
	bne     L03BC
	lda     _screen_hex_buffer+1
	sta     _screen_hex_buffer
	lda     _screen_hex_buffer+2
	sta     _screen_hex_buffer+1
	lda     _screen_hex_buffer+3
	sta     _screen_hex_buffer+2
	lda     _screen_hex_buffer+4
	sta     _screen_hex_buffer+3
	lda     #$20
	sta     _screen_hex_buffer+4
	inc     _j
	bra     L03BB
L03BC:	stz     _j
L03BD:	lda     _j
	cmp     #$05
	bcs     L0281
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     _j
	bcc     L03B1
	inx
L03B1:	sta     ptr1
	stx     ptr1+1
	ldy     _j
	lda     _screen_hex_buffer,y
	sta     (ptr1)
	inc     _j
	bra     L03BD
L0281:	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ set_screen_attributes (long, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_screen_attributes: near

.segment	"CODE"

	jsr     pusha
	ldy     #$05
	jsr     ldeaxysp
	jsr     pusheax
	ldx     #$0C
	lda     #$F7
	sta     sreg
	lda     #$0F
	sta     sreg+1
	lda     #$00
	jsr     tosaddeax
	jsr     pusheax
	stz     _i
L03BE:	lda     _i
	ldy     #$05
	cmp     (sp),y
	bcs     L034A
	jsr     ldeax0sp
	jsr     pusheax
	ldy     #$07
	jsr     ldeaxysp
	jsr     _lpeek
	sta     ptr1
	ldy     #$08
	lda     (sp),y
	ora     ptr1
	jsr     _lpoke
	jsr     ldeax0sp
	jsr     saveeax
	ldy     #$01
	jsr     inceaxy
	jsr     steax0sp
	jsr     resteax
	inc     _i
	bra     L03BE
L034A:	ldy     #$0A
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ write_line (__near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_write_line: near

.segment	"CODE"

	jsr     pusha
	lda     #$00
	jsr     pusha
	bra     L01E6
L01E4:	lda     (sp)
	ina
	sta     (sp)
L01E6:	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (sp)
	tay
	lda     (ptr1),y
	bne     L01E4
	jsr     decsp8
	ldy     #$0B
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	stz     sreg
	stz     sreg+1
	ldy     #$04
	jsr     steaxysp
	lda     _screen_line_address+3
	sta     sreg+1
	lda     _screen_line_address+2
	sta     sreg
	ldx     _screen_line_address+1
	lda     _screen_line_address
	jsr     pusheax
	ldy     #$0D
	ldx     #$00
	lda     (sp),y
	jsr     tosadd0ax
	jsr     steax0sp
	ldy     #$08
	lda     (sp),y
	ldx     #$00
	jsr     _lcopy
	ldy     #<(_screen_line_address)
	sty     ptr1
	ldy     #>(_screen_line_address)
	lda     #$40
	jsr     laddeqa
	lda     _screen_line_address+3
	sta     sreg+1
	lda     _screen_line_address+2
	sta     sreg
	ldx     _screen_line_address+1
	lda     _screen_line_address
	jsr     pusheax
	ldx     #$F4
	lda     #$00
	jsr     tossub0ax
	cmp     #$40
	txa
	sbc     #$07
	lda     sreg
	sbc     #$00
	lda     sreg+1
	sbc     #$00
	bcs     L03BF
	jmp     incsp4
L03BF:	ldy     #<(_screen_line_address)
	sty     ptr1
	ldy     #>(_screen_line_address)
	lda     #$40
	jsr     lsubeqa
	jsr     decsp8
	ldy     #$04
	lda     #$40
	sta     (sp),y
	lda     #$F4
	iny
	sta     (sp),y
	lda     #$00
	iny
	sta     (sp),y
	iny
	sta     (sp),y
	sta     (sp)
	ldy     #$02
	sta     (sp),y
	iny
	sta     (sp),y
	lda     #$F4
	ldy     #$01
	sta     (sp),y
	ldx     #$07
	lda     #$00
	jsr     _lcopy
	jsr     decsp8
	ldy     #$04
	lda     #$40
	sta     (sp),y
	lda     #$00
	iny
	sta     (sp),y
	lda     #$F8
	iny
	sta     (sp),y
	lda     #$0F
	iny
	sta     (sp),y
	lda     #$00
	sta     (sp)
	ldy     #$01
	sta     (sp),y
	lda     #$F8
	iny
	sta     (sp),y
	lda     #$0F
	iny
	sta     (sp),y
	ldx     #$07
	lda     #$00
	jsr     _lcopy
	jsr     decsp5
	lda     #$00
	ldy     #$01
	sta     (sp),y
	ldy     #$03
	sta     (sp),y
	iny
	sta     (sp),y
	lda     #$FB
	ldy     #$02
	sta     (sp),y
	lda     #$20
	sta     (sp)
	ldx     #$00
	lda     #$40
	jsr     _lfill
	jsr     decsp5
	ldy     #$01
	lda     #$00
	sta     (sp),y
	lda     #$07
	iny
	sta     (sp),y
	lda     #$F8
	iny
	sta     (sp),y
	lda     #$0F
	iny
	sta     (sp),y
	lda     #$01
	sta     (sp)
	ldx     #$00
	lda     #$40
	jsr     _lfill
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ recolour_last_line (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_recolour_last_line: near

.segment	"CODE"

	jsr     pusha
	lda     _screen_line_address+3
	sta     sreg+1
	lda     _screen_line_address+2
	sta     sreg
	ldx     _screen_line_address+1
	lda     _screen_line_address
	jsr     pusheax
	ldx     #$F4
	lda     #$00
	jsr     tossub0ax
	jsr     pusheax
	ldx     #$00
	lda     #$F8
	sta     sreg
	lda     #$0F
	sta     sreg+1
	txa
	jsr     tosaddeax
	ldy     #$40
	jsr     deceaxy
	jsr     pusheax
	jsr     decsp5
	ldy     #$08
	jsr     ldeaxysp
	ldy     #$01
	jsr     steaxysp
	ldy     #$09
	lda     (sp),y
	sta     (sp)
	ldx     #$00
	lda     #$40
	jsr     _lfill
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ read_line (__near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_line: near

.segment	"CODE"

	jsr     pusha
	lda     #$00
	jsr     pusha
	jsr     decsp1
	lda     #$90
	jsr     pusha
	jmp     L039C
L03C1:	lda     $D610
	ldy     #$01
	sta     (sp),y
	iny
	lda     (sp),y
	jsr     pusha0
	lda     _screen_line_address+3
	sta     sreg+1
	lda     _screen_line_address+2
	sta     sreg
	ldx     _screen_line_address+1
	lda     _screen_line_address
	jsr     tosulong
	jsr     tosaddeax
	jsr     pusheax
	ldx     #$00
	lda     #$F8
	sta     sreg
	lda     #$0F
	sta     sreg+1
	txa
	jsr     tosaddeax
	jsr     pusheax
	ldx     #$F4
	lda     #$00
	jsr     tossub0ax
	jsr     pusheax
	ldy     #$04
	lda     (sp),y
	jsr     pusha0
	ldy     #$08
	lda     (sp),y
	jsr     pusha0
	lda     _screen_line_address+3
	sta     sreg+1
	lda     _screen_line_address+2
	sta     sreg
	ldx     _screen_line_address+1
	lda     _screen_line_address
	jsr     tosulong
	jsr     tosaddeax
	jsr     pusheax
	ldx     #$00
	lda     #$F8
	sta     sreg
	lda     #$0F
	sta     sreg+1
	txa
	jsr     tosaddeax
	jsr     pusheax
	ldx     #$F4
	lda     #$00
	jsr     tossub0ax
	jsr     _lpeek
	and     #$0F
	jsr     tosora0
	jsr     _lpoke
	ldy     #$01
	lda     (sp),y
	jeq     L039C
	cmp     #$14
	jne     L03C3
	iny
	lda     (sp),y
	jeq     L039D
	lda     (sp),y
	jsr     pusha0
	lda     _screen_line_address+3
	sta     sreg+1
	lda     _screen_line_address+2
	sta     sreg
	ldx     _screen_line_address+1
	lda     _screen_line_address
	jsr     tosulong
	jsr     tosaddeax
	jsr     pusheax
	ldx     #$00
	lda     #$F8
	sta     sreg
	lda     #$0F
	sta     sreg+1
	txa
	jsr     tosaddeax
	jsr     pusheax
	ldx     #$F4
	lda     #$00
	jsr     tossub0ax
	jsr     pusheax
	ldy     #$06
	lda     (sp),y
	jsr     pusha0
	lda     _screen_line_address+3
	sta     sreg+1
	lda     _screen_line_address+2
	sta     sreg
	ldx     _screen_line_address+1
	lda     _screen_line_address
	jsr     tosulong
	jsr     tosaddeax
	jsr     pusheax
	ldx     #$00
	lda     #$F8
	sta     sreg
	lda     #$0F
	sta     sreg+1
	txa
	jsr     tosaddeax
	jsr     pusheax
	ldx     #$F4
	lda     #$00
	jsr     tossub0ax
	jsr     _lpeek
	and     #$0F
	jsr     _lpoke
	ldy     #$02
	lda     (sp),y
	dea
	sta     (sp),y
	lda     _screen_line_address+3
	sta     sreg+1
	lda     _screen_line_address+2
	sta     sreg
	ldx     _screen_line_address+1
	lda     _screen_line_address
	jsr     pusheax
	ldy     #$06
	ldx     #$00
	lda     (sp),y
	jsr     tosadd0ax
	jsr     pusheax
	lda     #$20
	jsr     _lpoke
	ldy     #$02
	lda     (sp),y
	jsr     pusha0
	lda     _screen_line_address+3
	sta     sreg+1
	lda     _screen_line_address+2
	sta     sreg
	ldx     _screen_line_address+1
	lda     _screen_line_address
	jsr     tosulong
	jsr     tosaddeax
	jsr     pusheax
	ldx     #$00
	lda     #$F8
	sta     sreg
	lda     #$0F
	sta     sreg+1
	txa
	jsr     tosaddeax
	jsr     pusheax
	ldx     #$F4
	lda     #$00
	jsr     tossub0ax
	jsr     pusheax
	ldy     #$06
	lda     (sp),y
	jsr     pusha0
	lda     _screen_line_address+3
	sta     sreg+1
	lda     _screen_line_address+2
	sta     sreg
	ldx     _screen_line_address+1
	lda     _screen_line_address
	jsr     tosulong
	jsr     tosaddeax
	jsr     pusheax
	ldx     #$00
	lda     #$F8
	sta     sreg
	lda     #$0F
	sta     sreg+1
	txa
	jsr     tosaddeax
	jsr     pusheax
	ldx     #$F4
	lda     #$00
	jsr     tossub0ax
	jsr     _lpeek
	sta     ptr1
	ldy     #$04
	lda     (sp),y
	ora     ptr1
	jsr     _lpoke
	ldy     #$02
	lda     (sp),y
	clc
	ldy     #$04
	adc     (sp),y
	sta     sreg
	lda     #$00
	iny
	adc     (sp),y
	sta     sreg+1
	lda     #$00
	sta     (sreg)
	jmp     L039D
L03C3:	lda     (sp),y
	cmp     #$0D
	bne     L0386
	iny
	lda     (sp),y
	clc
	ldy     #$04
	adc     (sp),y
	sta     ptr1
	lda     #$00
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$00
	sta     (ptr1)
	ldy     #$02
	tax
	jmp     L03C0
L0386:	lda     _screen_line_address+3
	sta     sreg+1
	lda     _screen_line_address+2
	sta     sreg
	ldx     _screen_line_address+1
	lda     _screen_line_address
	jsr     pusheax
	ldy     #$06
	ldx     #$00
	lda     (sp),y
	jsr     tosadd0ax
	jsr     pusheax
	ldy     #$05
	lda     (sp),y
	jsr     _lpoke
	ldy     #$02
	lda     (sp),y
	jsr     pusha0
	lda     _screen_line_address+3
	sta     sreg+1
	lda     _screen_line_address+2
	sta     sreg
	ldx     _screen_line_address+1
	lda     _screen_line_address
	jsr     tosulong
	jsr     tosaddeax
	jsr     pusheax
	ldx     #$00
	lda     #$F8
	sta     sreg
	lda     #$0F
	sta     sreg+1
	txa
	jsr     tosaddeax
	jsr     pusheax
	ldx     #$F4
	lda     #$00
	jsr     tossub0ax
	jsr     pusheax
	ldy     #$06
	lda     (sp),y
	jsr     pusha0
	lda     _screen_line_address+3
	sta     sreg+1
	lda     _screen_line_address+2
	sta     sreg
	ldx     _screen_line_address+1
	lda     _screen_line_address
	jsr     tosulong
	jsr     tosaddeax
	jsr     pusheax
	ldx     #$00
	lda     #$F8
	sta     sreg
	lda     #$0F
	sta     sreg+1
	txa
	jsr     tosaddeax
	jsr     pusheax
	ldx     #$F4
	lda     #$00
	jsr     tossub0ax
	jsr     _lpeek
	and     #$0F
	jsr     _lpoke
	ldy     #$07
	jsr     pushwysp
	ldy     #$04
	lda     (sp),y
	pha
	ina
	sta     (sp),y
	pla
	jsr     tosadda0
	sta     sreg
	stx     sreg+1
	ldy     #$01
	lda     (sp),y
	sta     (sreg)
	bra     L039D
L039B:	jsr     decsp2
	lda     #$01
	sta     $D610
	dea
	sta     (sp)
	ldy     #$01
	sta     (sp),y
L03A1:	ldy     #$01
	lda     (sp),y
	cmp     #$61
	bne     L03A8
	lda     (sp)
	cmp     #$A8
L03A8:	bcs     L03A2
	ldy     #$01
	lda     (sp),y
	tax
	lda     (sp)
	sta     regsave
	stx     regsave+1
	ina
	bne     L03AA
	inx
L03AA:	jsr     stax0sp
	bra     L03A1
L03A2:	jsr     incsp2
L039D:	lda     $D610
	bne     L039B
L039C:	ldy     #$02
	ldx     #$00
	lda     (sp),y
	iny
	cmp     (sp),y
	jcc     L03C1
	dey
L03C0:	lda     (sp),y
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ format_decimal (const int, const int, const unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_format_decimal: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp7
	lda     sp
	ldx     sp+1
	jsr     pushax
	ldy     #$0B
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _screen_decimal
	lda     #$00
	ldy     #$06
	sta     (sp),y
	tax
L03C5:	lda     (sp),y
	iny
	cmp     (sp),y
	bcs     L0295
	dey
	lda     (sp),y
	clc
	ldy     #$0A
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     push0ax
	lda     sp
	ldx     sp+1
	clc
	adc     #$04
	bcc     L02A0
	inx
L02A0:	ldy     #$0A
	clc
	adc     (sp),y
	bcc     L02A1
	inx
L02A1:	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jsr     _lpoke
	ldy     #$06
	ldx     #$00
	lda     (sp),y
	ina
	sta     (sp),y
	bra     L03C5
L0295:	ldy     #$0C
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ format_hex (const int, const long, const unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_format_hex: near

.segment	"CODE"

	jsr     pusha
	ldy     #$0B
	jsr     subysp
	lda     sp
	ldx     sp+1
	jsr     pushax
	ldy     #$11
	jsr     ldeaxysp
	jsr     _screen_hex
	lda     #$08
	sec
	ldy     #$0B
	sbc     (sp),y
	ldy     #$09
	bra     L03CD
L03C6:	lda     #$00
	iny
L03CE:	sta     (sp),y
	cmp     #$07
	bcs     L03C9
	lda     sp
	ldx     sp+1
	clc
	adc     (sp),y
	bcc     L0179
	inx
L0179:	jsr     pushax
	ldy     #$0C
	ldx     #$00
	lda     (sp),y
	ina
	bne     L017C
	inx
L017C:	clc
	adc     #$02
	bcc     L017D
	inx
	clc
L017D:	adc     sp
	sta     ptr1
	txa
	adc     sp+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1)
	jsr     staspidx
	ldy     #$0A
	lda     (sp),y
	ina
	bra     L03CE
L03C9:	lda     #$20
	ldy     #$07
	sta     (sp),y
	ldy     #$09
	lda     (sp),y
	dea
L03CD:	sta     (sp),y
	lda     (sp),y
	bne     L03C6
	iny
	sta     (sp),y
	tax
L03CC:	lda     (sp),y
	iny
	cmp     (sp),y
	bcs     L0183
	dey
	lda     (sp),y
	clc
	ldy     #$10
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     push0ax
	lda     sp
	ldx     sp+1
	clc
	adc     #$04
	bcc     L018E
	inx
L018E:	ldy     #$0E
	clc
	adc     (sp),y
	bcc     L018F
	inx
L018F:	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jsr     _lpoke
	ldy     #$0A
	ldx     #$00
	lda     (sp),y
	ina
	sta     (sp),y
	bra     L03CC
L0183:	ldy     #$12
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ fatal_error (__near__ unsigned char *, unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fatal_error: near

.segment	"CODE"

	jsr     pushax
	lda     #$02
	jsr     _display_footer
	stz     _i
L0319:	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	beq     L03D3
	lda     _i
	clc
	adc     #$6C
	pha
	lda     #$00
	adc     #$FB
	tax
	pla
	jsr     pushax
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
	inc     _i
	bra     L0319
L03D3:	lda     _i
	clc
	adc     #$6C
	sta     ptr1
	lda     #$00
	adc     #$FB
	sta     ptr1+1
	lda     #$3A
	sta     (ptr1)
	inc     _i
	lda     _i
	clc
	adc     #$6C
	pha
	lda     #$00
	adc     #$FB
	tax
	pla
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _screen_decimal
	jsr     decsp5
	ldy     #$01
	lda     #$40
	sta     (sp),y
	lda     #$07
	iny
	sta     (sp),y
	lda     #$F8
	iny
	sta     (sp),y
	lda     #$0F
	iny
	sta     (sp),y
	lda     #$22
	sta     (sp)
	ldx     #$00
	lda     #$50
	jsr     _lfill
L0343:	bra     L0343

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ to_screen_hex (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_to_screen_hex: near

.segment	"CODE"

	jsr     pusha
	lda     (sp)
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_screen_hex_digits)
	sta     ptr1+1
	ldy     #<(_screen_hex_digits)
	ldx     #$00
	lda     (ptr1),y
	jmp     incsp1

.endproc

