;
; File generated by cc65 v 2.17 - Git 6c320f7d
;
	.fopt		compiler,"cc65 v 2.17 - Git 6c320f7d"
	.setcpu		"65C02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.export		_m65_io_enable
	.export		_lpeek
	.export		_lpoke
	.export		_lcopy
	.export		_lfill
	.export		_dmalist
	.export		_dma_byte
	.export		_do_dma

.segment	"BSS"

_dmalist:
	.res	18,$00
_dma_byte:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ m65_io_enable (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_m65_io_enable: near

.segment	"CODE"

	lda     #$47
	sta     $D02F
	lda     #$53
	sta     $D02F
	lda     #$41
	sta     $0000
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ lpeek (long)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_lpeek: near

.segment	"CODE"

	jsr     pusheax
	lda     #$0B
	sta     _dmalist
	lda     #$80
	sta     _dmalist+1
	jsr     ldeax0sp
	ldy     #$00
	ldx     sreg+1
	bpl     L001D
	dey
L001D:	lda     sreg
	sty     sreg+1
	sty     sreg
	jsr     asreax4
	sta     _dmalist+2
	lda     #$81
	sta     _dmalist+3
	stz     _dmalist+4
	stz     _dmalist+5
	stz     _dmalist+6
	lda     #$01
	sta     _dmalist+7
	stz     _dmalist+7+1
	jsr     ldeax0sp
	jsr     pusheax
	ldx     #$FF
	txa
	jsr     tosand0ax
	sta     _dmalist+9
	stx     _dmalist+9+1
	jsr     ldeax0sp
	lda     sreg
	and     #$0F
	sta     _dmalist+11
	lda     #>(_dma_byte)
	sta     _dmalist+12+1
	lda     #<(_dma_byte)
	sta     _dmalist+12
	stz     _dmalist+14
	jsr     _do_dma
	ldx     #$00
	lda     _dma_byte
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ lpoke (long, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_lpoke: near

.segment	"CODE"

	jsr     pusha
	lda     #$0B
	sta     _dmalist
	lda     #$80
	sta     _dmalist+1
	stz     _dmalist+2
	ina
	sta     _dmalist+3
	ldy     #$04
	jsr     ldeaxysp
	ldy     #$00
	ldx     sreg+1
	bpl     L0040
	dey
L0040:	lda     sreg
	sty     sreg+1
	sty     sreg
	jsr     asreax4
	sta     _dmalist+4
	stz     _dmalist+5
	lda     (sp)
	sta     _dma_byte
	stz     _dmalist+6
	lda     #$01
	sta     _dmalist+7
	stz     _dmalist+7+1
	lda     #>(_dma_byte)
	sta     _dmalist+9+1
	lda     #<(_dma_byte)
	sta     _dmalist+9
	stz     _dmalist+11
	ldy     #$04
	jsr     ldeaxysp
	jsr     pusheax
	ldx     #$FF
	txa
	jsr     tosand0ax
	sta     _dmalist+12
	stx     _dmalist+12+1
	ldy     #$04
	jsr     ldeaxysp
	lda     sreg
	and     #$0F
	sta     _dmalist+14
	jsr     _do_dma
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ lcopy (long, long, unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_lcopy: near

.segment	"CODE"

	jsr     pushax
	lda     #$0B
	sta     _dmalist
	lda     #$80
	sta     _dmalist+1
	ldy     #$09
	jsr     ldeaxysp
	ldy     #$00
	ldx     sreg+1
	bpl     L005B
	dey
L005B:	lda     sreg
	sty     sreg+1
	sty     sreg
	jsr     asreax4
	sta     _dmalist+2
	lda     #$81
	sta     _dmalist+3
	ldy     #$05
	jsr     ldeaxysp
	ldy     #$00
	ldx     sreg+1
	bpl     L0061
	dey
L0061:	lda     sreg
	sty     sreg+1
	sty     sreg
	jsr     asreax4
	sta     _dmalist+4
	stz     _dmalist+5
	stz     _dmalist+6
	ldy     #$01
	lda     (sp),y
	sta     _dmalist+7+1
	lda     (sp)
	sta     _dmalist+7
	stz     _dmalist+15
	ldy     #$09
	jsr     ldeaxysp
	jsr     pusheax
	ldx     #$FF
	txa
	jsr     tosand0ax
	sta     _dmalist+9
	stx     _dmalist+9+1
	ldy     #$09
	jsr     ldeaxysp
	lda     sreg
	and     #$0F
	sta     _dmalist+11
	ldy     #$09
	jsr     ldeaxysp
	cmp     #$00
	txa
	sbc     #$D0
	lda     sreg
	sbc     #$00
	lda     sreg+1
	sbc     #$00
	bcc     L0070
	ldy     #$09
	jsr     ldeaxysp
	cmp     #$00
	txa
	sbc     #$E0
	lda     sreg
	sbc     #$00
	lda     sreg+1
	sbc     #$00
	bcs     L0070
	lda     #$80
	tsb     _dmalist+11
L0070:	ldy     #$05
	jsr     ldeaxysp
	jsr     pusheax
	ldx     #$FF
	txa
	jsr     tosand0ax
	sta     _dmalist+12
	stx     _dmalist+12+1
	ldy     #$05
	jsr     ldeaxysp
	lda     sreg
	and     #$0F
	sta     _dmalist+14
	ldy     #$05
	jsr     ldeaxysp
	cmp     #$00
	txa
	sbc     #$D0
	lda     sreg
	sbc     #$00
	lda     sreg+1
	sbc     #$00
	bcc     L007C
	ldy     #$05
	jsr     ldeaxysp
	cmp     #$00
	txa
	sbc     #$E0
	lda     sreg
	sbc     #$00
	lda     sreg+1
	sbc     #$00
	bcs     L007C
	lda     #$80
	tsb     _dmalist+14
L007C:	jsr     _do_dma
	ldy     #$0A
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ lfill (long, unsigned char, unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_lfill: near

.segment	"CODE"

	jsr     pushax
	lda     #$0B
	sta     _dmalist
	lda     #$80
	sta     _dmalist+1
	stz     _dmalist+2
	ina
	sta     _dmalist+3
	ldy     #$06
	jsr     ldeaxysp
	ldy     #$00
	ldx     sreg+1
	bpl     L008E
	dey
L008E:	lda     sreg
	sty     sreg+1
	sty     sreg
	jsr     asreax4
	sta     _dmalist+4
	stz     _dmalist+5
	lda     #$03
	sta     _dmalist+6
	stz     _dmalist+15
	ldy     #$01
	lda     (sp),y
	sta     _dmalist+7+1
	lda     (sp)
	sta     _dmalist+7
	iny
	stz     _dmalist+9+1
	lda     (sp),y
	sta     _dmalist+9
	ldy     #$06
	jsr     ldeaxysp
	jsr     pusheax
	ldx     #$FF
	txa
	jsr     tosand0ax
	sta     _dmalist+12
	stx     _dmalist+12+1
	ldy     #$06
	jsr     ldeaxysp
	lda     sreg
	and     #$0F
	sta     _dmalist+14
	ldy     #$06
	jsr     ldeaxysp
	cmp     #$00
	txa
	sbc     #$D0
	lda     sreg
	sbc     #$00
	lda     sreg+1
	sbc     #$00
	bcc     L009F
	ldy     #$06
	jsr     ldeaxysp
	cmp     #$00
	txa
	sbc     #$E0
	lda     sreg
	sbc     #$00
	lda     sreg+1
	sbc     #$00
	bcs     L009F
	lda     #$80
	tsb     _dmalist+14
L009F:	jsr     _do_dma
	jmp     incsp7

.endproc

; ---------------------------------------------------------------
; void __near__ do_dma (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_do_dma: near

.segment	"CODE"

	jsr     _m65_io_enable
	stz     $D702
	stz     $D704
	ldx     #>(_dmalist)
	stx     $D701
	lda     #<(_dmalist)
	sta     $D705
	rts

.endproc

