;
; File generated by cc65 v 2.17 - Git 6c320f7d
;
	.fopt		compiler,"cc65 v 2.17 - Git 6c320f7d"
	.setcpu		"65C02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_printf
	.import		_mega65_fast
	.import		_setup_screen
	.import		_write_line
	.import		_recolour_last_line
	.import		_clrscr
	.import		_kbhit
	.import		_gotoxy
	.import		_cputc
	.import		_cgetc
	.import		_textcolor
	.import		_clearNumero
	.import		_layout
	.export		_setupSerial
	.export		_write_modem
	.export		_modem_line
	.export		_modem_line_len
	.export		_process_modem_line
	.export		_poll_modem
	.export		_main

.segment	"DATA"

_modem_line_len:
	.byte	$00

.segment	"RODATA"

L0166:
	.byte	$48,$65,$6C,$6C,$6F,$20,$77,$6F,$72,$6C,$64,$21,$00
L0127:
	.byte	$25,$73,$0A,$00
L01EB:
	.byte	$25,$73,$00

.segment	"BSS"

_modem_line:
	.res	255,$00

; ---------------------------------------------------------------
; int __near__ setupSerial (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setupSerial: near

.segment	"CODE"

	lda     #$B2
	sta     $D0E6
	lda     #$01
	sta     $D0E7
	ldx     #$00
	txa
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ write_modem (__near__ const unsigned char *, const unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_write_modem: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp1
	lda     #$00
L01F3:	sta     (sp)
	ldy     #$01
	cmp     (sp),y
	jeq     incsp4
	ldy     #$03
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (sp)
	tay
	lda     (ptr1),y
	sta     $D0E0
	lda     (sp)
	ina
	bra     L01F3

.endproc

; ---------------------------------------------------------------
; void __near__ process_modem_line (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_process_modem_line: near

.segment	"CODE"

	lda     #<(L0127)
	ldx     #>(L0127)
	jsr     pushax
	lda     #<(_modem_line)
	ldx     #>(_modem_line)
	jsr     pushax
	ldy     #$04
	jmp     _printf

.endproc

; ---------------------------------------------------------------
; void __near__ poll_modem (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_poll_modem: near

.segment	"CODE"

	lda     $D0E0
	jsr     pusha
	lda     (sp)
	beq     L013B
	cmp     #$0D
	beq     L01F4
	cmp     #$0A
	bne     L01F5
L01F4:	ldy     _modem_line_len
	lda     #$00
	sta     _modem_line,y
	jsr     _process_modem_line
	stz     _modem_line_len
	jmp     incsp1
L01F5:	lda     _modem_line_len
	cmp     #$FE
	bcs     L013B
	inc     _modem_line_len
	clc
	adc     #<(_modem_line)
	sta     ptr1
	lda     #$00
	adc     #>(_modem_line)
	sta     ptr1+1
	lda     (sp)
	sta     (ptr1)
L013B:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"RODATA"

L0148:
	.byte	$59,$45,$53,$20,$4F,$50,$54,$55,$53,$00
	.byte	$30,$39,$3A,$32,$36,$3A,$33,$30,$00
	.res	1,$00
	.byte	$34,$47,$2B,$00
	.res	6,$00
	.byte	$4C,$6F,$77,$00
	.res	6,$00
L0150:
	.byte	$50,$61,$75,$6C,$00
	.res	13,$00
	.byte	$4A,$73,$00
	.res	15,$00
	.byte	$53,$65,$63,$72,$65,$74,$00
	.res	11,$00
	.byte	$4C,$6F,$72,$65,$6D,$20,$49,$70,$73,$75,$6D,$00
	.res	6,$00
	.byte	$46,$6C,$69,$6E,$64,$65,$72,$73,$00
	.res	9,$00

.segment	"CODE"

	ldy     #$66
	jsr     subysp
	lda     #$00
	jsr     pusha
	jsr     decsp1
	jsr     pusha
	ldy     #$28
	jsr     subysp
	ldy     #$27
L014C:	lda     L0148,y
	sta     (sp),y
	dey
	bpl     L014C
	ldy     #$5A
	jsr     subysp
	ldy     #$59
L0155:	lda     L0150,y
	sta     (sp),y
	dey
	bpl     L0155
	jsr     _mega65_fast
	jsr     _setup_screen
	lda     #$41
	sta     $0000
	lda     #$47
	sta     $D02F
	lda     #$53
	sta     $D02F
	jsr     _setupSerial
	lda     #<(L0166)
	ldx     #>(L0166)
	jsr     pushax
	lda     #$00
	jsr     _write_line
	lda     #$02
	jsr     _recolour_last_line
	bra     L016E
L016D:	jsr     _poll_modem
	jsr     _kbhit
	tax
	beq     L01F7
	jsr     _cgetc
	jsr     pusha
	lda     (sp)
	beq     L0175
	lda     sp
	ldx     sp+1
	jsr     pushax
	lda     #$01
	jsr     _write_modem
L0175:	jsr     incsp1
L01F7:	lda     $D020
	ina
	and     #$0F
	sta     $D020
	bra     L016D
L016E:	jsr     _clrscr
	lda     #$01
	jsr     _layout
L0185:	lda     #$01
	jsr     _textcolor
	lda     #$00
	jsr     pusha
	jsr     _gotoxy
	lda     #$00
	ldy     #$EA
L020A:	sta     (sp),y
	cmp     #$04
	jcs     L01D7
	lda     #$00
	dey
L0209:	sta     (sp),y
	cmp     #$0A
	bcs     L01FD
	iny
	ldx     #$00
	lda     (sp),y
	jsr     mulax10
	clc
	adc     #$5A
	bcc     L01A1
	inx
	clc
L01A1:	adc     sp
	sta     ptr1
	txa
	adc     sp+1
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	bne     L019E
	ina
	ldy     #$82
	sta     (sp),y
L019E:	ldy     #$82
	lda     (sp),y
	cmp     #$01
	bne     L01A5
	lda     #$20
	bra     L01F6
L01A5:	ldy     #$EA
	ldx     #$00
	lda     (sp),y
	jsr     mulax10
	clc
	adc     #$5A
	bcc     L01AD
	inx
	clc
L01AD:	adc     sp
	sta     ptr1
	txa
	adc     sp+1
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
L01F6:	jsr     _cputc
	ldy     #$E9
	lda     (sp),y
	ina
	bra     L0209
L01FD:	lda     #$00
	ldy     #$82
	sta     (sp),y
	ldy     #$EA
	lda     (sp),y
	ina
	bra     L020A
L01B1:	jsr     _cgetc
	ldy     #$83
	sta     (sp),y
	cmp     #$65
	beq     L01FE
	lda     (sp),y
	cmp     #$45
	bne     L0201
L01FE:	lda     #$00
	iny
	sta     (sp),y
	lda     sp
	ldx     sp+1
	clc
	adc     #$85
	bcc     L01FF
	inx
L01FF:	sta     ptr1
	stx     ptr1+1
	lda     (sp),y
	tay
	lda     #$00
	sta     (ptr1),y
	jsr     _clearNumero
	jmp     L01D7
L0201:	lda     (sp),y
	cmp     #$63
	beq     L0202
	cmp     #$43
	bne     L0204
L0202:	lda     #$02
	jsr     _layout
	jmp     L01D7
L0204:	lda     (sp),y
	cmp     #$61
	beq     L0205
	cmp     #$41
	bne     L0207
L0205:	lda     #$03
	jsr     _layout
	jmp     L01D7
L0207:	lda     (sp),y
	cmp     #$03
	bne     L01CF
	jsr     _clrscr
	lda     #$01
	jsr     _layout
	bra     L01D7
L01CF:	iny
	lda     (sp),y
	cmp     #$0E
	bcs     L01D7
	dey
	lda     (sp),y
	cmp     #$30
	beq     L0208
	cmp     #$31
	beq     L0208
	cmp     #$32
	beq     L0208
	cmp     #$33
	beq     L0208
	cmp     #$34
	beq     L0208
	cmp     #$35
	beq     L0208
	cmp     #$36
	beq     L0208
	cmp     #$37
	beq     L0208
	cmp     #$38
	beq     L0208
	cmp     #$39
	beq     L0208
	cmp     #$23
	beq     L0208
	cmp     #$2A
	beq     L0208
	cmp     #$2B
	bne     L01D7
L0208:	lda     sp
	ldx     sp+1
	clc
	adc     #$85
	bcc     L01DC
	inx
L01DC:	sta     ptr1
	stx     ptr1+1
	lda     (sp),y
	pha
	iny
	lda     (sp),y
	tay
	pla
	sta     (ptr1),y
	ldy     #$84
	ldx     #$00
	lda     (sp),y
	ina
	bne     L01E1
	inx
L01E1:	clc
	adc     #$85
	bcc     L01E2
	inx
	clc
L01E2:	adc     sp
	sta     ptr1
	txa
	adc     sp+1
	sta     ptr1+1
	lda     #$00
	sta     (ptr1)
	ldy     #$84
	lda     (sp),y
	ina
	sta     (sp),y
L01D7:	jsr     _kbhit
	cmp     #$00
	jne     L01B1
	ina
	jsr     pusha
	lda     #$03
	jsr     _gotoxy
	lda     #$01
	jsr     _textcolor
	lda     #<(L01EB)
	ldx     #>(L01EB)
	jsr     pushax
	lda     sp
	ldx     sp+1
	clc
	adc     #$87
	bcc     L01EE
	inx
L01EE:	jsr     pushax
	ldy     #$04
	jsr     _printf
	jmp     L0185

.endproc

